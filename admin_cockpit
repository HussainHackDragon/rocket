
#!/usr/bin/env bash
################################################################
#                                                              #
# 11/01/2023 Naqi Rizvi.                                       #
# Change History                                               #
#                                                              #
################################################################
################################################################
################################################################
#                                                              #
# Copyright (C) 2011, 2023 Naqi Rizvi                          #
# mohammednaqi@gmail.com                                       #
#                                                              #
# This program is free software; you can redistribute it       #
# and/or modify it under the terms of the GNU General Public   #
# License as published by the Free Software Foundation;        #
# either version 2 of the License, or at your option) any      #
# (later version.                                              #
#                                                              #
# This program is distributed in the hope that it will be      #
# useful, but WITHOUT ANY WARRANTY; without even the implied   #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      #
# PURPOSE. See the GNU General Public License for more         #
# details.                                                     #
#                                                              #
# You should have received a copy of the GNU General Public    #
# License along with this program; if not, write to the Free   #
# Software Foundation, Inc., 59 Temple Place, Suite 330,       #
# Boston, MA 02111-1307 USA                                    #
#                                                              #
################################################################
################################################################
################################################################
 #set -o errexit  # exit on error
 #set -o nounset  # don't allow unset variables
# set -o xtrace # enable for debugging

# default values
VERSION='0.6.1'
opt_debug="false"
opt_testing='false'
CONF_FILE='/tmp/.zhash.conf'
LOG_FILE='/tmp/cockpit.log'

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"

phpbin='/usr/local/bin/php'
wpbin='/usr/local/bin/wp'
wpcliopt='--skip-themes --skip-plugins'

# COLORS
RED=';31m'
GREEN=';32m'
YELLOW=';33m'
GREY=';34m'
PURPLE=';35m'
CYAN=';36m'
NC='\e[0m' # No Color
NORMAL='\e[0'
BOLD='\e[1'
FAINT='\e[2'
ITALIC='\e[3'
LINK='\e[4'


function version() {  printf "$VERSION\n"; }

function print_out(){
  case $1 in
    'error')   color="${NORMAL}${RED}";    pretext="ERROR:   " ;;
    'info')    color="${NORMAL}${GREY}";   pretext="INFO:    " ;;
    'debug')   color="${NORMAL}${YELLOW}"; pretext="DEBUG:   " ;;
    'success') color="${NORMAL}${GREEN}";  pretext="SUCCESS: " ;;
    'link')    color="${LINK}${CYAN}";     pretext="URL:     " ;;
  esac
  printf "${color}${pretext} $2 ${NC}\n"
  now=$(date)
  printf "[%s] %s%s \n" "$now" "${pretext}" "$2" >> $LOG_FILE
  return 1
}

function die(){
 if [ $opt_testing == 'true' ]; then
   print_out debug "Exit Code $1"
 else
   exit $1
 fi
}

function trapeze () {
  #curl -sL "$softurl/sapp-wp-signon.php" > /dev/null
  echo
  printf "${NORMAL}${RED}Houston!${NORMAL}${CYAN} Termination sequence launched. ${NORMAL}${GREEN}Cockpit ejection successful.${NC}\n"
  exit
}

trap trapeze SIGINT

################################################################
# Sanity checks                                                #
################################################################
function root_validation(){
  if [[ `id -u` == 0 &&  $1 == 'root' ]]
  then
    return 0
  else
    return 1
  fi
}



function user_validation(){
  if [ -z "$1" ];  then
    read -rep "User [$old_user]:" user
    user="${user:-$old_user}"
  else
    user=$1
  fi

  printf "${NORMAL}${CYAN}Thrusting site user${NC}\n"; sleep .2;
  usercheck=$(/usr/sbin/whmapi1 accountsummary user=$user | grep result: | awk '{ print $2 }')
  if [[ $usercheck == 1 ]]
  then true;
    print_out info "Validated User:$user"
    config=$(echo "$config" | sed "/^user:/c\user:$user") && update_conf
    homedir="/home/$user"
    webroot="$homedir/public_html"
    redisdir="$homedir/redis"
    siteurl=$(cat $homedir/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 | grep softurl -A1 |sed '/softurl/d' | tail -3 | tail -1)
  else print_out error "$user is not a valid username. Please check and try again."; sleep .8
    return 1
  fi
}

function domain_validation(){
  if [ -z "$1" ];  then
    read -rep "Domain [$old_domain]:" domain
    domain="${domain:-$old_domain}"
  else
    domain=$1
  fi
  if [[ -z "$domain" ]]; then print_out error "You must enter a domain"; sleep .2; exit 1; fi
  domain=$(echo "$domain" | sed -e 's|^[^/]*//||' -e 's|/.*$||')
  validate="^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"
  if [[ "$domain" =~ $validate ]]; then
      print_out info "Validated Domain:$domain"
      #sed -i "/^domain:/c\domain:$domain" $CONF_FILE
      config=$(echo "$config" | sed "/^domain:/c\domain:$domain") && update_conf
  else
      print_out error "Invalid Domain:$domain"; domain=''; exit 1
  fi
}

function ip_validation(){
  if [ -z "$1" ];  then
    read -rep "IP [$old_ip]:" ipaddr
    ipaddr="${ipaddr:-$old_ip}"
  else
    ipaddr=$1
  fi

  if [[ "$ipaddr" == "" ]]
  then print_out error 'Please specify an IP'
  return 1
  else
    local  stat=1
    if [[ $ipaddr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      ip=($ipaddr)
      IFS=$OIFS
      [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
      stat=$?
    fi
    if [[ $stat -ne 0 ]]; then
      echo "Invalid IP Address ($ipaddr). Please check the IP and try again."
      return $stat
    else
      config=$(echo "$config" | sed "/^ip:/c\ip:$ipaddr") && update_conf
    fi
  fi
}

function Backup(){
  user=$(whoami)
  input=/home/$user
  output=/tmp/${user}_home_$(date +%Y-%m-%d_%H%M%S).tar.gz

  echo Total files: `find . -type f | wc -l`
  echo Total directories: `find . -type d | wc -l`

  tar -czf $output $input 2> /dev/null
  echo Files archived: `tar -tzf $output | grep -v /$ | wc -l`
  echo Directories archived: `tar -tzf $output | grep  /$ | wc -l`
  echo
  echo "Backup of $input completed! Details about the output backup file:"
  ls -l $output
}

################################################################
# Server Administration                                        #
################################################################
function Memory(){
  echo 'Server Memory Usage------------------------------------------------------------------------'
  free -mhtl
  echo 'Memory Usage by process - Top 10-----------------------------------------------------------'
  ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' | head
  echo 'Swap Usage by process - Top 10-------------------------------------------------------------'
  for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file 2>/dev/null; done| awk '{ print $2" "$3" "$1 }'  | sort -n | tail
}

function LVEPS(){
  echo 'User consumption by CPU--------------------------------------------------------------------'
  lveps -ds cpu
  echo 'User consumption by Memory-----------------------------------------------------------------'
  lveps -ds mem
}

function LVE(){
  echo "AVG CPU - $1"
  lveinfo --period $1 -d --show-columns ID,aCPU,mCPU,aPMem,mPMem,aEP,mEP,lPMem,aNproc,mNproc,aIO,mIO,aIOPS,mIOPS -o aCPU
  echo "MAX CPU - $1"
  lveinfo --period $1 -d --show-columns ID,mCPU,aCPU,aPMem,mPMem,aEP,mEP,lPMem,aNproc,mNproc,aIO,mIO,aIOPS,mIOPS -o mCPU
  echo "AVG Physical Memory - $1"
  lveinfo --period $1 -d --show-columns ID,aPMem,mPMem,aCPU,mCPU,aEP,mEP,lPMem,aNproc,mNproc,aIO,mIO,aIOPS,mIOPS -o aPMem
  echo "MAX Physical Memory - $1"
  lveinfo --period $1 -d --show-columns ID,mPMem,aPMem,aCPU,mCPU,aEP,mEP,lPMem,aNproc,mNproc,aIO,mIO,aIOPS,mIOPS -o mPMem
}

function MySQL(){
  echo 'Mysql Information Schema ------------------------------------------------------------------'
  mysql -e 'SELECT TABLE_SCHEMA,TABLE_NAME,ENGINE,TABLE_ROWS,AVG_ROW_LENGTH,DATA_LENGTH,INDEX_LENGTH FROM INFORMATION_SCHEMA.TABLES order by table_rows ASC;'
  mysql -e 'SELECT table_schema, ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS `Size(MB)` FROM information_schema.TABLES GROUP BY table_schema ORDER BY `Size(MB)` ASC;'
  mysql -e 'SELECT table_schema as `Database`, table_name AS `Table`, round(((data_length + index_length) / 1024 / 1024), 2) `Size in MB` FROM information_schema.TABLES ORDER BY (data_length + index_length) ASC;'
}

function MySQL_rowcount(){
  echo 'Mysql Database, Tables by Total Row, AVG Row length, Index length -------------------------'
  mysql -e 'SELECT TABLE_SCHEMA,TABLE_NAME,ENGINE,TABLE_ROWS,AVG_ROW_LENGTH,DATA_LENGTH,INDEX_LENGTH FROM INFORMATION_SCHEMA.TABLES order by table_rows DESC limit 10;'
}

function MySQL_dbsize(){
  echo 'MySQL Database Disk Consumption -----------------------------------------------------------'
  mysql -e 'SELECT table_schema as `Database`, ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS `Size(MB)` FROM information_schema.TABLES GROUP BY table_schema ORDER BY `Size(MB)` DESC Limit 10;'
}

function MySQL_tablesize(){
  echo 'MySQL Tables Disk Consumption -------------------------------------------------------------'
  mysql -e 'SELECT table_schema as `Database`, table_name AS `Table`, ROUND(((data_length + index_length) / 1024 / 1024), 2) AS `Size(MB)` FROM information_schema.TABLES ORDER BY `Size(MB)` DESC Limit 10;'
}

function Nginx(){
  echo 'Nginx Access count by IP & URL ------------------------------------------------------------'
  awk '{print $1,$7}' /var/log/nginx/access.log | cut -d? -f1 | sort | uniq -c |sort -n | tail
  echo 'Nginx Access count by IP, URL & URI -------------------------------------------------------'
  awk '{print $1,$7,$9}' /var/log/nginx/access.log | cut -d? -f1 | sort | uniq -c |sort -n | tail
}

function Journal(){
  echo 'Services Logs ----------------------------------------------------------'
  journalctl -u nginx.service --since today
  journalctl -u mysqld.service --since today
  journalctl -u httpd.service --since today
  echo 'Journal - Last 20 ------------------------------------------------------'
  journalctl -p err -b -n 20
}

function Process(){
  echo 'Processes Count --------------------------------------------------------'
  ps aux | awk '{print $1, $11}' | sort | uniq -c | sort -n | tail
  echo 'Redis Sockets ----------------------------------------------------------'
  ps aux | grep 'redis.sock' | grep -v 'grep' | awk '{print $1}' | uniq -c | sort -n
  echo 'Apache Processes -------------------------------------------------------'
  ps auxwwwf  | grep httpd | wc -l
  echo 'Nginx Processes --------------------------------------------------------'
  ps auxwwwf  | grep nginx | wc -l
  echo 'MySql Process ----------------------------------------------------------'
  ps auxwwwf  | grep mysql | wc -l
}

function ServerXray(){
  Memory
  LVEPS
  #LVE '30d'
  #LVE
  MySQL_rowcount
  MySQL_dbsize
  MySQL_tablesize
  Nginx
  Journal
  Process
}

function ftpconn(){
  netstat -n | grep :21 && ps aux | grep ftp | awk {'print $1'} | sort | uniq -c
}

function memoryusage(){
  ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' | head 
}

function swapusage(){
  for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file 2>/dev/null; done| awk '{ print $2" "$3" "$1 }'  | sort -n | tail -20
}


################################################################
# Domain Lookups                                               #
################################################################
function domainlookup(){
  res=$(curl -s -XPOST -H "content-type: application/json" https://api.rocket.net/internal/v1/sites/lookup -d "{\"domain\": \"$domain\"}")
  if [[ $res == *"site_id"* ]]; then
    print_out success 'Domain exists on Rocket.net';
    echo 'Site ID:'; echo "$res" | jq -r '.site_id'
    echo 'Username:'; echo "$res" | jq -r '.username'
    exit 0
  elif [[ $res == *"Unable to find installation with given domain"* ]]; then
    print_out error 'Unable to find installation with given domain.'
  else
    print_out error 'Failed to lookup the domain.'
  fi
}

function dnslookup(){  
  host -a $domain
}

function domain_header(){  
  curl -ILsvo /dev/null -H 'Cache-Control: no-cache' -w "
  No Connects, %{num_connects}
  No Redirects, %{num_redirects}
  Size Download, %{size_download}
  Size Header, %{size_header}
  Size Request, %{size_request}
  Time Appconnect, %{time_appconnect}
  Time Namelookup, %{time_namelookup}
  Time Pretransfer, %{time_pretransfer}
  Time Redirect, %{time_redirect}
  Time Connect, %{time_connect}
  TTFB, %{time_starttransfer}
  Total time, %{time_total}\n" $domain | column -s, -t
}

################################################################
# Server Firewall                                              #
################################################################

###ModSec
function IPWhitelisting (){
  modconf="/etc/apache2/conf.d/modsec/modsec2.user.conf"
  errorlog="/usr/local/apache/logs/error_log"

  fullip=$1    #assign variable $fullip from first argument
  ip=$1    #assign variable $ip for use in the ip_validation routine.
  ip3=$(echo $ip| cut -d. -f1,2,3);    #first three octets of the IP
  epoch=$(date +%s)     #Unix time stamp for uniq id: in the modsec rule

  # IP is good, continue and make cool messages along the way
  if $(grep -A2 $ip3 $errorlog | grep "Pattern match" > /dev/null 2>&1)
  then
  echo "Info: IP Found To Be Triggering Mod Security"
  else
  echo "Info: $fullip Not Found To Be Triggering Mod Security"
  fi

  # Check to see if the /24 is already whitelisted
  # Check to see if the first 3 octets are already whitelisted
  if $(grep $ip3.0  $modconf > /dev/null 2>&1)
  then
    echo "Info: $fullip is already exempted from Mod Security"
    exit 0
  else
    # Whitelist the IP#exclude the entire /24, assign the Unix time as the id
    echo SecRule REMOTE_ADDR \"@ipMatch $ip3.0/24\" \"phase:1,id:$epoch,nolog,allow\" >> $modconf
    #true && echo Launch Successful! #uncomment for testing
    /scripts/restartsrv_apache --restart
    print_out success "$fullip Whitelisted in Mod Security"
    exit 0
  fi
}

###Unblock SSH/sFTP
function csf_deny_remove(){
 if [[ $(csf -dr $1| grep 'Removing rule') ]]
 then
 print_out success "IP Address ($1) is now whitelisted"
 else
 echo "Info: IP Address ($1) is not blocked"
 fi
}

###Allow cPanel Port
function csf_cpanel_whitelist(){
  out=$(csf -a "tcp|in|d=2083|s=$1")
  if [[ $out =~ 'Adding tcp' ]]; then
  print_out success "IP Address ($1) is now whitelisted on port 2083"; sleep .2
  elif [[ $out =~ 'already in the allow' ]]; then
  echo "Info: IP Address ($1) is already whitelisted on port 2083"; sleep .2
  else
  print_out error "$out"
  fi
  out=$(csf -a "tcp|in|d=2087|s=$1")
  if [[ $out =~ 'Adding tcp' ]]; then
  print_out success "IP Address ($1) is now whitelisted on port 2087"
  exit 0
  elif [[ $out =~ 'already in the allow' ]]; then
  echo "Info: IP Address ($1) is already whitelisted on port 2087"
  exit 0
  else
  print_out error "$out"
  fi
}

###Allow remote MySQL
function remote_mysql(){
  user_validation $user
  out=$(csf -a "tcp|in|d=3306|s=$1")
  if [[ $out =~ 'Adding tcp' ]]; then
  print_out success "MySQL is now accepting connections from ($1)"; sleep .2
  elif [[ $out =~ 'already in the allow' ]]; then
  echo "Info: MySQL is already accepting connections from ($1)"; sleep .2
  else
  print_out error "$out"
  fi
  if [[ $(uapi  --user=$user Mysql add_host host=$1 | grep 'status: 1') ]]; then
  print_out success "Remote MySQL is now enabled for ($user)"; sleep .8
  exit 0
  else
  print_out error "Remote MySQL is not enabled for ($user)"
  fi
}

###Allow outgoing port
function openport(){
  csfconf="/etc/csf/csf.conf"
  
  if [ -z "$1" ];  then
    read -rep "Specify Port [$old_port]:" newport
    newport="${newport:-$old_port}"
  else
    newport=$1
  fi
  
  if [[ "$newport" == "" ]]
  then print_out error 'Please specify a port number'
  return 1
  else
    if [[ $(echo $newport| grep -E '^([0-9]{4,5}$)') ]]
    then
      if [[ -z $(grep ,$newport $csfconf) ]]
      then
        tcpout=$(grep ^TCP_OUT $csfconf | cut -d\" -f2 );
        #echo $tcpout
        sed  "s@^TCP_OUT.*@TCP_OUT = \"$tcpout,$newport\"@" $csfconf -i
        /usr/sbin/csf -r >/dev/null && print_out success "Port $newport is now open."; sleep .8
      else
        echo "Info: $newport is already open."; sleep .8
      fi
    else
      print_out error "$newport is not a valid port number";
      return 1
    fi
  fi
  #sed -i "/^port:/c\port:$newport" $CONF_FILE
  config=$(echo "$config" | sed "/^port:/c\port:$newport") && update_conf
  return 0
}

################################################################
# Database Administration                                      #
################################################################

###Fix WP credentials from Softaculous
function site_autoload_size(){
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
prefix=\$(wp db prefix --skip-plugins --skip-themes)
echo "Table Prefix:\$prefix"
$phpbin $wpbin db query "SELECT 'autoloaded data in KiB' as name, ROUND(SUM(LENGTH(option_value))/ 1024) as value FROM \$prefix""options WHERE autoload='yes' \
UNION SELECT 'autoloaded data count', count(*) FROM \$prefix""options WHERE autoload='yes' \
UNION (SELECT option_name, length(option_value) FROM \$prefix""options WHERE autoload='yes' ORDER BY length(option_value) DESC LIMIT 10);" | tr '\t' ',' | column -s, -t
EOF
}

function site_db_size(){
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
$phpbin $wpbin db size --human-readable --all-tables --orderby=size --order=asc --skip-plugins --skip-themes
$phpbin $wpbin db size --human-readable --skip-plugins --skip-themes
EOF
}

function fix_db_credentials(){
su $user -s /usr/bin/bash -- << \EOF
if [[ -f "/home/$USER/.softaculous/installations.php" ]]; then
cd /home/$USER/public_html
if [ -f "wp-config.php" ]
then
#dbuser=$(/usr/local/bin/php -r  "\$data=reset(unserialize(file_get_contents('/home/$USER/.softaculous/installations.php')));echo \$data[softdbuser];")
dbuser=$(cat /home/$USER/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 |grep softdb -A1|sed '/localhost\|softdb/d' | head -3 | head -1)
dbpass=$(cat /home/$USER/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 |grep softdb -A1|sed '/localhost\|softdb/d' | head -3 | tail -1)
echo -e "${NORMAL}${GREY}INFO:     Fixing Database credentials for Production${NC}";
/usr/local/bin/php /usr/local/bin/wp option get home --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_USER "$dbuser" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_NAME "$dbuser" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_PASSWORD "$dbpass" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_HOST 'localhost' --skip-plugins --skip-themes

if [ $(/usr/local/cpanel/3rdparty/bin/php /usr/local/cpanel/whostmgr/docroot/cgi/softaculous/cli.php --list_ins --count=1) == 2 ];then
dbuser=$(cat /home/$USER/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 |grep softdb -A1|sed '/localhost\|softdb/d' | tail -3 | head -1)
dbpass=$(cat /home/$USER/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 |grep softdb -A1|sed '/localhost\|softdb/d' | tail -3 | tail -1)
echo -e "${NORMAL}${GREY}INFO:     Fixing Database credentials for Staging${NC}";
/usr/local/bin/php /usr/local/bin/wp option get home --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_USER "$dbuser" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_NAME "$dbuser" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_PASSWORD "$dbpass" --skip-plugins --skip-themes
/usr/local/bin/php /usr/local/bin/wp config set DB_HOST 'localhost' --skip-plugins --skip-themes
fi

else
print_out error 'Wordpress Installation not found'
fi
else
print_out error 'Softaculous Installation not found'
fi
EOF
}

function fix_db_collation(){
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
echo "Info: Backing up Database"
$phpbin $wpbin db export pre_collation_backup.sql
echo "Info: Moving Backup to /home/$user/tmp"
mv pre_collation_backup.sql /home/$user/tmp
echo "Info: Running MySQL Check"
$phpbin $wpbin db check |sed 's/\|/ /'|awk '{print \$1}' > /home/$user/tmp/dbtables.txt
sed -i '$ d' /home/$user/tmp/dbtables.txt
echo "Info: Converting Charset and Collation"
while read line; do $phpbin $wpbin db query "alter table \$line CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"; done < /home/$user/tmp/dbtables.txt
$phpbin $wpbin config set DB_CHARSET 'utf8'
$phpbin $wpbin config set DB_COLLATE ''
echo "Info: Flushing Cache and CDN"
$phpbin $wpbin cache flush
$phpbin $wpbin rewrite flush
$phpbin $wpbin cdn purge
rm /home/$user/tmp/dbtables.txt
EOF
print_out success 'Conversion Completed Successfully'
}

###Mysql Engine conversion
function myisam_2_innodb(){
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
OLDIFS="$IFS"
IFS=$'\n' # bash specific
WPTABLES=\$($phpbin $wpbin db query "SHOW TABLE STATUS WHERE Engine = 'MyISAM'" --skip-plugins --skip-themes --silent --skip-column-names | awk '{ print \$1}')
for WPTABLE in \${WPTABLES[@]}; do
echo "Info: Converting \${WPTABLE} to InnoDB"
$phpbin $wpbin db query "ALTER TABLE \${WPTABLE} ENGINE=InnoDB" --skip-plugins --skip-themes
done
IFS="$OLDIFS"
echo 'Success: Conversion from MyISAM to InnoDB completed'
EOF
}

################################################################
# Migrations                                                   #
################################################################

###All-in-one Migration
function migrate_ai1wm(){
cat <<_EOF_
All-In-One-Migration
++++++++++++++++++++
How do you like to migrate the site?
  (1) Download from remote host.
  (2) File located under different path.
  (3) All-In-One Backups that already exists under the site.
_EOF_

read -rep $'\nChoose an Option [1-3]: ' choice3
case $choice3 in
  1|2|3)
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
echo 'Info: Deleting default plugins: akismet coming-soon google-analytics-for-wordpress hello optinmonster wpforms-lite wp-mail-smtp'
$phpbin $wpbin plugin deactivate akismet coming-soon google-analytics-for-wordpress hello optinmonster wpforms-lite wp-mail-smtp --skip-plugins --skip-themes > /dev/null 2>&1
$phpbin $wpbin plugin delete akismet coming-soon google-analytics-for-wordpress hello optinmonster wpforms-lite wp-mail-smtp --skip-plugins --skip-themes > /dev/null 2>&1
echo 'Info: Installing all-in-one-wp-migration all-in-one-wp-migration-unlimited-extension'
$phpbin $wpbin plugin install all-in-one-wp-migration https://rocketscripts.space/assets/aiounlimited.zip  --activate --skip-plugins --skip-themes > /dev/null 2>&1
$phpbin $wpbin plugin update all-in-one-wp-migration-unlimited-extension --skip-plugins --skip-themes > /dev/null 2>&1
EOF
  ;;&
  1|2)
  read -ep 'Provide the URL/path of All-in-One-backup(.wpress) file:' filepath
    if [ -z "$filepath" ]; then
      print_out error 'No URL/path provided.' ; exit 1
    fi
  ;;&
  1)
    status_code=$(curl --write-out %{http_code} --silent --output /dev/null $filepath)
    if [[ $status_code -eq 200 ]]; then
      print_out info "Backup found, downloading..."
      su - $user -s /usr/bin/bash -c "wget -c --header='Accept: text/html' --user-agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0' -P /home/$user/public_html/wp-content/ai1wm-backups/ $filepath"
    else
      print_out error "$status_code Unable to download backup"; exit 1
    fi
  ;;
  2) 
  if [[ -f "$filepath" ]]; then
    mv $filepath /home/$user/public_html/wp-content/ai1wm-backups/
    echo $(basename "$filepath")
  else
    print_out error "Backup file doens't exists"; exit 1
  fi
  ;;
  3) ;;
  *)  echo -e "\tinvalid option, please try again"; exit 1;;
esac

su - $user -s /usr/bin/bash -- <<EOF
cd /home/$user/public_html
response=\$($phpbin $wpbin ai1wm list-backups 2>&1)
if [[ \$response == *"Allowed memory size"* ]]; then
echo 'Error: PHP memory limit reached, please increase it then re-run the migration.'
exit 1
elif [[ \$response == *"Fatal error"* ]]; then
echo "Error: \$response"
exit 1
elif [[ \$response == *"Error:"* ]]; then
echo "Error: \$response"
exit 1
fi
echo "Info: Verifying All-in-One-backup(.wpress) under /home/$user/public_html/wp-content/ai1wm-backups/"
$phpbin $wpbin ai1wm list-backups --quiet
EOF
retVal=$?
if [ $retVal -ne 0 ]; then
    print_out error 'Migration failed'; exit $retVal
else
  if [[ $(ls -1 /home/$user/public_html/wp-content/ai1wm-backups/*.wpress 2>/dev/null | wc -l) -gt 0 ]]; then
    if [[ $choice3 -eq 3 ]]; then
      read -ep 'Which backup do you like to restore?' wpressname
    else
      wpressname=$(basename "$filepath")
    fi
    migration_status=$(su - $user -s /usr/bin/bash -c "cd /home/$user/public_html && $phpbin $wpbin ai1wm restore $wpressname --yes")
  else
    print_out error 'No Backup found.'
  fi
fi

if [[ $migration_status == *"Restore complete"* ]]; then
  read -ep "Do you like to delete the backup? [yn]" answer
  if [[ $answer = y ]] ; then
  rm -f /home/$user/public_html/wp-content/ai1wm-backups/$wpressname
  fi

su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
echo 'Info: Deleting all-in-one-wp-migration all-in-one-wp-migration-unlimited-extension'
$phpbin $wpbin plugin deactivate all-in-one-wp-migration all-in-one-wp-migration-unlimited-extension --quiet --skip-plugins --skip-themes > /dev/null 2>&1
$phpbin $wpbin plugin delete all-in-one-wp-migration all-in-one-wp-migration-unlimited-extension --quiet --skip-plugins --skip-themes > /dev/null 2>&1
echo 'Info: Clearing cache'
$phpbin $wpbin cache flush
$phpbin $wpbin rewrite flush
$phpbin $wpbin cdn purge
$phpbin $wpbin option get home --quiet --skip-plugins --skip-themes
EOF
  print_out success 'Migration completed Successfully.'
else
  print_out error 'Migration failed.'
fi
}

function migrate_seravo(){
cat <<_EOF_
Seravo Migration
++++++++++++++++++++
_EOF_
read -rep 'Please provide Source Host: ' mgHost
read -rep 'Please provide SSH User: ' mgUser
read -rep 'Please provide SSH Port [22]: ' mgPort
read -rep 'Please provide Domain: ' mgDomain
mgPort=${mgPort:-22}
if [ $mgPort > 22 ]; then #whitelist port if < 22
 openport $mgPort
fi
echo "Runnign Command: ssh $mgUser@$mgHost -p $mgPort"
ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd ~/htdocs/wp-content
pwd
echo '==========================================================================================='
echo 'Table Prefix' && wp config get table_prefix
echo '==========================================================================================='
sleep .8
wp db export rocketdb.sql 2> /dev/null
EOF
if [ ! $? -eq 0 ]; then
 exit 1
fi
url=$(su - $user -s /usr/bin/bash -c "wp option get home --path=/home/$user/public_html")

su - $user -s /usr/bin/bash -- << EOF
echo "Info: Migrating to site $url"
echo "Info: Accessing remote Host for Rsync"
rsync -avz -e "ssh  -o StrictHostKeyChecking=no -p $mgPort" $mgUser@$mgHost:~/htdocs/wp-content/ /home/$user/public_html/wp-content
echo "Info: Taking Database Backup"
$phpbin $wpbin db import $webroot/wp-content/rocketdb.sql --path=$webroot $wpcliopt
echo "Info: Running Search & Replace"
$phpbin $wpbin search-replace "$mgDomain" "$url" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only --path=$webroot $wpcliopt
echo "Info: Clearing Cache"
$phpbin $wpbin cache flush --path=$webroot $wpcliopt && $phpbin $wpbin rewrite flush --path=$webroot $wpcliopt && rm -rf wp-content/cache
echo "Info: Removing wp-content/rocketdb.sql"
rm /home/$user/public_html/wp-content/rocketdb.sql
EOF
if [ ! $? -eq 0 ]; then
 exit 1
fi
ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd ~/htdocs/wp-content
rm rocketdb.sql
EOF
print_out success 'Migration Completed'
}

function migrate_ssh_old(){
cat <<_EOF_
++++++++++++++++++++
$1 Migration
++++++++++++++++++++
Please provide Remote server details.
_EOF_
read -rep 'Source Domain: ' mgDomain
read -rep 'Source Webroot: ' mgRoot
read -rep 'Remote Host: ' mgHost
read -rep 'SSH Port [22]: ' mgPort
read -rep 'SSH User: ' mgUser
read -sep 'SSH Password: ' mgPass
echo
mgPort=${mgPort:-22}
if [ $mgPort != 22 ]; then
 openport $mgPort
fi
print_out info "Runnign Command: ssh $mgUser@$mgHost -p $mgPort ${NC}"
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd $mgRoot
echo '======================= Collecting Details from Remote Host ==============================='
printf 'Site:' && wp option get home
printf 'Path:' && pwd
printf 'Prefix:' && prefix=\$(wp config get table_prefix) &&  echo "\$prefix" | tee .table_prefix
echo '==========================================================================================='
echo -e "${NORMAL}${GREY}INFO:     Exporting Database Backup${NC}"
wp db export rocketdb.sql 2> /dev/null
echo -e "${NORMAL}${GREY}INFO:     Securing Permissions on Source Host${NC}"
chmod 400 rocketdb.sql .table_prefix
EOF
url=$(su - $user -s /usr/bin/bash -c "$phpbin $wpbin option get home --path=$webroot")
print_out info "Migrating to site $url"
print_out info "Accessing Remote Host for Rsync"
sshpass -p $mgPass rsync -avz --info=progress2 --info=name0 --exclude wp-content/cache* --exclude wp-content/mu-plugins/* -e "ssh  -o StrictHostKeyChecking=no -p $mgPort" $mgUser@$mgHost:$mgRoot/ /home/$user/public_html/
reset_permissions
fix_db_credentials
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html/
echo -e "${NORMAL}${GREY}INFO:     Importing Database Backup${NC}"
$phpbin $wpbin db import $webroot/rocketdb.sql $wpcliopt
prefix=\$(cat .table_prefix)
echo -e "${NORMAL}${GREY}INFO:     Updating Prefix to \$prefix${NC}"
$phpbin $wpbin config set table_prefix "\$prefix"
echo -e "${NORMAL}${GREY}INFO:     Running Search & Replace:$mgDomain -> $url${NC}"
$phpbin $wpbin search-replace "$mgDomain" "$url" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt
echo -e "${NORMAL}${GREY}INFO:     Clearing Cache${NC}"
$phpbin $wpbin cache flush $wpcliopt && $phpbin $wpbin rewrite flush $wpcliopt && rm -rf wp-content/cache
echo -e "${NORMAL}${GREY}INFO:     Removing rocketdb.sql${NC}"
rm rocketdb.sql .table_prefix
EOF
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd $mgRoot
rm rocketdb.sql .table_prefix
EOF
print_out success "Migration Completed"
exit 0
}

function migrate_ssh(){
mgsource=$1
cat <<_EOF_
++++++++++++++++++++
$mgsource Migration
++++++++++++++++++++
Please provide Remote server details.
_EOF_
printf "Source "
domain_validation
mgDomain=$domain

if [[ $mgsource == 'cloudways' ]]; then
  read -rep "Cloudways App User [$old_ssh_appname]:" mgAppUser
  mgAppUser="${mgAppUser:-$old_ssh_appname}"
  if [[ -z "$mgAppUser" ]]; then print_out error "You must provide $mgsource App Username"; sleep .2; exit 1; else config=$(echo "$config" | sed "/^ssh_appname:/c\ssh_appname:$mgAppUser") && update_conf; fi
  mgRoot="/home/master/applications/$mgAppUser/public_html/"
elif [[ $mgsource == 'seravo' ]]; then
  mgRoot="~/htdocs/wp-content/"
else
  read -rep "Remote Webroot with trailing slash [$old_ssh_webroot]:" mgRoot
  mgRoot="${mgRoot:-$old_ssh_webroot}"
  if [[ -z "$mgRoot" ]]; then print_out error "You must provide $mgsource Webroot"; sleep .2; exit 1; else config=$(echo "$config" | sed "/^ssh_webroot:/c\ssh_webroot:$mgRoot") && update_conf; fi
fi

read -rep "Remote Host [$old_ssh_host]:" mgHost
mgHost="${mgHost:-$old_ssh_host}"
if [[ -z "$mgHost" ]]; then print_out error "You must provide $mgsource Server IP"; sleep .2; exit 1; else config=$(echo "$config" | sed "/^ssh_host:/c\ssh_host:$mgHost") && update_conf; fi

read -rep "SSH Port [$old_ssh_port]:" mgPort
mgPort="${mgPort:-$old_ssh_port}"
if [[ -z "$mgPort" ]]; then print_out error "You must provide $mgsource SSH Port"; sleep .2 ; exit 1; else config=$(echo "$config" | sed "/^ssh_port:/c\ssh_port:$mgPort") && update_conf; fi

read -rep "SSH User [$old_ssh_user]:" mgUser
mgUser="${mgUser:-$old_ssh_user}"
if [[ -z "$mgUser" ]]; then print_out error "You must provide $mgsource SSH Username"; sleep .2 ; exit 1; else config=$(echo "$config" | sed "/^ssh_user:/c\ssh_user:$mgUser") && update_conf; fi

read -sep "SSH Password [$old_ssh_pass]:" mgPass
mgPass="${mgPass:-$old_ssh_pass}"
if [[ -z "$mgPass" ]]; then print_out error "You must provide $mgsource SSH Password"; sleep .2; exit 1; else config=$(echo "$config" | sed "/^ssh_pass:/c\ssh_pass:$mgPass") && update_conf; fi
echo

if [[ "$mgPort" != 22 ]]; then
 openport "$mgPort"
fi

tempurl=$(su - $user -s /usr/bin/bash -c "$phpbin $wpbin option get home --path=$webroot $wpcliopt")
[[ -z "$tempurl" ]] && { print_out info "Failed to fetch the destination domain, considering Softaculous Domain as a valid domain:$siteurl"; tempurl=$siteurl;}
url=$(echo $tempurl | awk -F[/:] '{print $4}')
read -rep "Please confirm if Destination URL ($url) is valid [Y/n]?" -n1 snrcheck
if [[ $snrcheck == 'n' ]] ; then
  printf "Destination Domain:"
  domain_validation
  url=$domain
fi

print_out info "Runnign Command: ssh $mgUser@$mgHost -p $mgPort ${NC}"
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
if [ ! -d "$mgRoot" ]; then
  echo -e "${NORMAL}${RED}ERROR:     $mgRoot does not exist on remote host"
  exit 1
fi
cd $mgRoot
echo '======================= Remote Host Operation Started ================================'
rm -f rocketdb.sql .table_prefix
printf 'Site:' && wp option get home --quiet --skip-plugins --skip-themes --allow-root
printf 'Path:' && pwd
printf 'Prefix:' && prefix=\$(wp config get table_prefix --quiet --skip-plugins --skip-themes --allow-root) &&  echo "\$prefix" | tee .table_prefix
[[ -z "\$prefix" ]] && { echo "Error: No Prefix Found on remote host"; exit 1; }
echo -e "${NORMAL}${GREY}INFO:     Exporting Database Backup${NC}"
wp db export rocketdb.sql --allow-root 2> /dev/null
if [ \$? -ne 0 ]; then  echo "Error: Unable to take database backup on remote host"; exit 1; fi
echo -e "${NORMAL}${GREY}INFO:     Securing Permissions on Source Host${NC}"
chmod 400 rocketdb.sql .table_prefix
echo '======================= Remote Host Operation Completed =============================='
EOF
if [ $? -ne 0 ]; then  print_out error 'Error Occured during migration'; exit 1; fi

su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html/
echo -e "${NORMAL}${GREY}INFO:     Clearing Default Plugins${NC}"
[ -d "coming-soon" ] && $phpbin $wpbin plugin deactivate coming-soon --uninstall
[ -d "google-analytics-for-wordpress" ] && $phpbin $wpbin plugin deactivate google-analytics-for-wordpress --uninstall
[ -d "optinmonster" ] && $phpbin $wpbin plugin deactivate optinmonster --uninstall
[ -d "wpforms-lite" ] && $phpbin $wpbin plugin deactivate wpforms-lite --uninstall
[ -d "wp-mail-smtp" ] && $phpbin $wpbin plugin deactivate wp-mail-smtp --uninstall
[ -d "akismet" ] && $phpbin $wpbin plugin deactivate akismet --uninstall
[ -d "hello" ] && $phpbin $wpbin plugin deactivate hello --uninstall
EOF

print_out info "Migrating to site $url"
print_out info "Accessing Remote Host for Rsync"
sshpass -p $mgPass rsync -avz --info=progress2 --info=name0 -h --no-i-r --exclude={'.htaccess','.user.ini','php.ini','malcare-waf.php','wp-config.php','wp-content/object-cache.php','wp-content/cache*','wp-content/mu-plugins/*'} -e "ssh -o StrictHostKeyChecking=no -p $mgPort" $mgUser@$mgHost:$mgRoot/ /home/$user/public_html/
reset_permissions
fix_db_credentials
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html/
echo -e "${NORMAL}${GREY}INFO:     Importing Database Backup${NC}"
$phpbin $wpbin db import $webroot/rocketdb.sql $wpcliopt
prefix=\$(cat .table_prefix)
echo -e "${NORMAL}${GREY}INFO:     Updating Prefix to \$prefix${NC}"
$phpbin $wpbin config set table_prefix "\$prefix"

echo -e "${NORMAL}${GREY}INFO:     Running Search & Replace:http://$mgDomain -> https://$url${NC}"
$phpbin $wpbin search-replace "http://$mgDomain" "https://$url" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt
echo -e "${NORMAL}${GREY}INFO:     Running Search & Replace:https://$mgDomain -> https://$url${NC}"
$phpbin $wpbin search-replace "https://$mgDomain" "https://$url" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt
echo -e "${NORMAL}${GREY}INFO:     Running Search & Replace:$mgRoot -> /home/$user/public_html/"
$phpbin $wpbin search-replace "$mgRoot" "/home/$user/public_html/" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt

echo -e "${NORMAL}${GREY}INFO:     Removing Unrequired Plugins${NC}"
[ -d "wp-content/plugins/breeze" ] && $phpbin $wpbin plugin deactivate breeze --uninstall
[ -d "wp-content/plugins/bv-cloudways-automated-migration" ] && $phpbin $wpbin plugin deactivate bv-cloudways-automated-migration --uninstall
[ -d "wp-content/plugins/really-simple-ssl" ] && $phpbin $wpbin plugin deactivate really-simple-ssl --uninstall
#[ -d "wp-content/plugins/blogvault-real-time-backup" ] && $phpbin $wpbin plugin deactivate blogvault-real-time-backup --uninstall
[ -f "wp-content/object-cache.php" ] && $phpbin $wpbin plugin deactivate object-cache.php --uninstall
[ -d "wp-content/plugins/cdn-enabler" ] && $phpbin $wpbin plugin deactivate cdn-enabler --uninstall

#[ -d "wp-content/plugins/all-in-one-wp-migration-unlimited-extension" ] && $phpbin $wpbin plugin deactivate all-in-one-wp-migration-unlimited-extension --uninstall
#[ -d "wp-content/plugins/all-in-one-wp-migration" ] && $phpbin $wpbin plugin deactivate all-in-one-wp-migration --uninstall
[ -d "wp-content/plugins/autoupdater" ] && $phpbin $wpbin plugin deactivate autoupdater --uninstall
[ -d "wp-content/plugins/siteground-migrator" ] && $phpbin $wpbin plugin deactivate siteground-migrator --uninstall
[ -d "wp-content/plugins/servebolt-optimizer" ] && $phpbin $wpbin plugin deactivate servebolt-optimizer --uninstall
[ -d "wp-content/plugins/litespeed-cache" ] && $phpbin $wpbin plugin deactivate litespeed-cache --uninstall

echo -e "${NORMAL}${GREY}INFO:     Clearing Cache${NC}"
[ -d "wp-content/plugins/cache-enabler" ] && $phpbin $wpbin cache-enabler clear
[ -d "wp-content/plugins/autoptimize" ] && $phpbin $wpbin autoptimize clear
[ -d "wp-content/plugins/elementor" ] && $phpbin $wpbin elementor flush-css
[ -d "wp-content/themes/Avada" ] && $phpbin $wpbin fusion clear_caches
$phpbin $wpbin cache flush $wpcliopt && $phpbin $wpbin rewrite flush $wpcliopt && rm -rf wp-content/cache
echo -e "${NORMAL}${GREY}INFO:     Removing rocketdb.sql${NC}"
rm rocketdb.sql .table_prefix
EOF
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd $mgRoot
rm rocketdb.sql .table_prefix
if [ \$? -ne 0 ]; then  echo -e "${NORMAL}${RED}ERROR:     Unable to delete database backup on remote host, please delete rocketdb.sql and .table_prefix manually"; fi
EOF

if [ $? -ne 0 ]; then
print_out error 'Migration Failed'
exit 1
else
print_out success "Migration Completed"
exit 0
fi

}

function migrate_cw(){
cat <<_EOF_
++++++++++++++++++++
$1 Migration
++++++++++++++++++++
Please provide Remote server details.
_EOF_
printf "Source Domain:"
domain_validation
mgDomain=$domain

read -rep 'Cloudways App User: ' mgAppUser
if [[ -z "$mgAppUser" ]]; then print_out error "You must provide Cloudways App Username"; sleep .2; fi
mgRoot="/home/master/applications/$mgAppUser/public_html/"

read -rep 'Remote Host: ' mgHost
if [[ -z "$mgHost" ]]; then print_out error "You must provide Cloudways Server IP"; sleep .2; fi
read -rep 'SSH Port [22]: ' mgPort
read -rep 'SSH User: ' mgUser
if [[ -z "$mgUser" ]]; then print_out error "You must provide Cloudways Master/App Username"; sleep .2 ; fi
read -sep 'SSH Password: ' mgPass
if [[ -z "$mgPass" ]]; then print_out error "You must provide Cloudways SSH Password"; sleep .2; fi
echo
mgPort=${mgPort:-22}
if [ $mgPort != 22 ]; then
 openport $mgPort
fi


tempurl=$(su - $user -s /usr/bin/bash -c "$phpbin $wpbin option get home --path=$webroot $wpcliopt")
[[ -z "$url" ]] && { print_out error 'Failed to fetch the destination domain'; echo "Considering Softaculous Domain as a valid domain:$siteurl"; tempurl=$siteurl;}
url=$(echo $tempurl | awk -F[/:] '{print $4}')
read -rep "Please confirm if Destination URL ($url) is valid [Y/n]?" -n1 snrcheck
if [[ $snrcheck == 'n' ]] ; then
  printf "Destination Domain:"
  domain_validation
  url=$domain
fi

print_out info "Runnign Command: ssh $mgUser@$mgHost -p $mgPort"
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
#appuser=grep -r $mgDomain applications/*/conf/server.nginx | cut -d/ -f2 | head -1
#[[ -z "$appuser" ]] && { echo -e "${NORMAL}${RED}ERROR:     Domain not found"; exit 1; }

if [ ! -d "$mgRoot" ]; then
  echo -e "${NORMAL}${RED}ERROR:     $mgRoot does not exist on remote host"
  exit 1
fi

cd $mgRoot
echo '======================= Remote Host Operation Started ================================'
rm -f rocketdb.sql .table_prefix
printf 'Site:' && wp option get home --quiet --skip-plugins --skip-themes
printf 'Path:' && pwd
printf 'Prefix:' && prefix=\$(wp config get table_prefix --quiet --skip-plugins --skip-themes) &&  echo "\$prefix" | tee .table_prefix
[[ -z "\$prefix" ]] && { echo "Error: No Prefix Found on remote host"; exit 1; }
echo -e "${NORMAL}${GREY}INFO:     Exporting Database Backup${NC}"
wp db export rocketdb.sql 2> /dev/null
if [ \$? -ne 0 ]; then  echo "Error: Unable to take database backup on remote host"; exit 1; fi
echo -e "${NORMAL}${GREY}INFO:     Securing Permissions on Source Host${NC}"
chmod 400 rocketdb.sql .table_prefix
echo '======================= Remote Host Operation Completed =============================='
EOF
if [ $? -ne 0 ]; then  print_out error 'Error Occured during migration'; exit 1; fi

print_out info "Migrating to site $url"
print_out info "Accessing Remote Host for Rsync"
sshpass -p $mgPass rsync -avz --info=progress2 --info=name0 --exclude .htaccess --exclude .user.ini --exclude php.ini --exclude malcare-waf.php --exclude wp-config.php --exclude wp-content/object-cache.php --exclude wp-content/cache* --exclude wp-content/mu-plugins/* -e "ssh  -o StrictHostKeyChecking=no -p $mgPort" $mgUser@$mgHost:$mgRoot/ /home/$user/public_html/
reset_permissions
fix_db_credentials
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html/
echo -e "${NORMAL}${GREY}INFO:     Importing Database Backup${NC}"
$phpbin $wpbin db import $webroot/rocketdb.sql $wpcliopt
prefix=\$(cat .table_prefix)
echo -e "${NORMAL}${GREY}INFO:     Updating Prefix to \$prefix${NC}"
$phpbin $wpbin config set table_prefix "\$prefix"
echo -e "${NORMAL}${GREY}INFO:     Running Search & Replace:$mgDomain -> $url${NC}"
$phpbin $wpbin search-replace "$mgDomain" "$url" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt
$phpbin $wpbin search-replace "/home/master/applications/$mgAppUser" "/home/$user" --precise --recurse-objects --skip-columns=guid --all-tables --report-changed-only $wpcliopt

echo -e "${NORMAL}${GREY}INFO:     Removing Cloudways Traces${NC}"
$phpbin $wpbin plugin deactivate breeze bv-cloudways-automated-migration really-simple-ssl blogvault-real-time-backup object-cache.php --uninstall
echo -e "${NORMAL}${GREY}INFO:     Clearing Cache${NC}"
$phpbin $wpbin cache flush $wpcliopt && $phpbin $wpbin rewrite flush $wpcliopt && rm -rf wp-content/cache
echo -e "${NORMAL}${GREY}INFO:     Removing rocketdb.sql${NC}"
rm rocketdb.sql .table_prefix
EOF
sshpass -p $mgPass ssh -o StrictHostKeyChecking=no $mgUser@$mgHost -p $mgPort 'bash -s' << EOF
cd $mgRoot
rm rocketdb.sql .table_prefix
if [ \$? -ne 0 ]; then  echo -e "${NORMAL}${RED}ERROR:     Unable to delete database backup on remote host, please delete rocketdb.sql and .table_prefix manually"; fi
EOF

if [ $? -ne 0 ]; then
print_out error 'Migration Failed'
exit 1
else
print_out success "Migration Completed"
exit 0
fi
}


################################################################
# Wordpress Management                                         #
################################################################

function wordpress_sso(){
softurl=$(cat /home/$user/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 | grep softurl -A1 |sed '/softurl/d' | tail -3 | tail -1)
if [ $(/usr/local/cpanel/3rdparty/bin/php /usr/local/cpanel/whostmgr/docroot/cgi/softaculous/cli.php --list_ins --user=$user --count=1) == 2 ];then
  read -rep "Do you like to create SSO for Staging Site [Y/n]? " -n1 answer
  if [[ $answer = y ]] ; then
    webroot=$(cat /home/$user/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 | grep softpath -A1 |sed '/softpath/d' | tail -3 | head -1)
    softurl=$(cat /home/$user/.softaculous/installations.php | tr ';' '\n' | cut -d\" -f2 | grep softurl -A1 |sed '/softurl/d' | tail -3 | head -1)
    echo "Info: Staging Site found: $webroot"
  fi
fi
su - $user -s /usr/bin/bash -- << EOF
secret=\$(cat /proc/sys/kernel/random/uuid)
curl -s 'https://raw.githubusercontent.com/naqirizvi/rocket/main/sapp' -o $webroot/sapp-wp-signon.php
printf "${NORMAL}${CYAN}Injecting secret to PHP script${NC}\n"; sleep .5
sed -i "s/SECRET/\$secret/g" $webroot/sapp-wp-signon.php
printf "${NORMAL}${GREEN}Docked SSO script to site successfully${NC}\n"; sleep .2
echo 'Copy/Paste the link in browser. Once you login, the SSO will detech automatically.'; sleep .2
echo -e "${LINK}${CYAN}$softurl/sapp-wp-signon.php?pass=\$secret${NC}"
EOF
echo
sleep 3
until [ ! -e $webroot/sapp-wp-signon.php ]; do echo -e '\e[1A\e[KSSO file exist.'; sleep 2; echo -e '\e[1A\e[Krechecking the file...'; sleep 1; done
if [ $? -gt 0 ]; then
echo
print_out 'error' 'SSO abnormally terminated, please pay a visit to the crash site.'
#printf "${NORMAL}${RED}SSO abnormally terminated, please pay a visit to the crash site ;-( ${NC}\n"
curl -sL "$softurl/sapp-wp-signon.php" > /dev/null
else
echo
print_out 'success' 'Admin login successful, SSO detechted automatically.'

#printf "${NORMAL}${GREEN}Admin login successful, SSO detechted automatically.${NC}\n"
fi
}

function cpanel_sso(){
  cpanel_sso=$(whmapi1 create_user_session service=cpaneld locale=en user=$user | grep url | awk '{print $2}')
  echo -e "${LINK}${CYAN}$cpanel_sso${NC}"
}

###Linux permission reset
function reset_permissions(){
  print_out info "Resetting Permissions for $user"
  #find /home/$user/public_html/ -type f -exec chmod 644 {} \;
  find /home/$user/public_html/ -type f -print0 | xargs -0 chmod 644 
  find /home/$user/public_html/ -type d -print0 | xargs -0 chmod 755  
  #find /home/$user/public_html/ -type d -exec chmod 755 {} \;
  chown -R $user:$user /home/$user/public_html/
  print_out success "Permission Reset Complete"
}

###Setup Cron
function setup_cron() {
  crontemp=/home/$user/.crontemp
  case $1 in
      wp) cron="*/5 * * * * /usr/local/bin/php -f /home/$user/public_html/wp-cron.php"  ;;
      redis) cron="*/5 * * * * bash /home/$user/redis/start_redis.sh >/dev/null 2>&1"   ;;
  esac

  cronres=$(crontab -l -u $user 2>&1)
  if [[ "$cronres" == *"no crontab"* ]]; then
    echo "$cron" > $crontemp
    crontab -u $user $crontemp
    echo 'Info: No Cronjob found, configuring new one.'; sleep .2
  else
    if ! echo "$cronres" | fgrep -q "$cron"; then
      crontab -l -u $user > $crontemp
      echo "$cron" >> $crontemp
      crontab -u $user $crontemp
      rm -f $crontemp
      echo 'Info: Preserving old Cron and adding new one.'; sleep .2
    else
      echo 'Info: Cronjob already configured'; sleep .8; exit 0
    fi
  fi
  if [[ $1 == 'wp' ]]; then
    su - $user -s /usr/bin/bash -c "$phpbin $wpbin config set DISABLE_WP_CRON true --path=$webroot $wpcliopt"
    if [ $? -ne 0 ]; then
      print_out error 'Unable to set DISABLE_WP_CRON in wp-config.php'; sleep .8; exit 1
    fi
  fi
  print_out success 'Cron configured successfully'; sleep .8; exit 0
  crontab -l -u $user
}

function delete_cron() {
  crontemp=/home/$user/.crontemp
  case $1 in
      wp) cron="*/5 * * * * /usr/local/bin/php -f /home/$user/public_html/wp-cron.php"  ;;
      #redis) cron="*/5 * * * * bash /home/$user/redis/start_redis.sh >/dev/null 2>&1"   ;;
      redis) cron="start_redis.sh"   ;;
  esac

  cronres=$(crontab -l -u $user 2>&1)
  if [[ "$cronres" == *"no crontab"* ]]; then
    echo 'Info: No Cronjob found, nothing to delete.'; sleep .2
  else
  count1=$(crontab -l -u $user | wc -l)
  crontab -l -u $user | grep -v "$cron"  | crontab -u $user -
  count2=$(crontab -l -u $user | wc -l)
    if [[ $count2 < $count1 ]]; then
      print_out success 'Cron removed successfully.'; sleep .2
    elif [[ $count2 == $count1 ]]; then
      echo 'Info: Cronjob not found, nothing to delete.'; sleep .2
    else
      print_out error 'Unable to delete Cron. These are the cronjobs'; sleep .2
      crontab -l -u $user; sleep .2
    fi
  fi
}

###enable_redis
function redis_ping(){
  redis_ping_res=$(su - $user -s /usr/bin/bash -c "/usr/bin/redis-cli -s $redisdir/redis.sock ping 2>/dev/null")
  if [[  $redis_ping_res == 'PONG' ]]; then
    echo "Info: Redis daemon is running."
    return 0;
  else
    echo "Info: Redis daemon is not running."
    return 1
  fi
}

function redis_plugin(){
redis_status
if [[ $? -eq 1 ]]; then #redis not connected
echo "Info: Installing Redis Plugin."
su - $user -s /usr/bin/bash -- << EOF
$phpbin $wpbin config set WP_REDIS_SCHEME unix --path=$webroot --quiet $wpcliopt
$phpbin $wpbin config set WP_REDIS_PATH $redisdir/redis.sock --path=$webroot $wpcliopt
$phpbin $wpbin plugin install redis-cache --activate --path=$webroot $wpcliopt
$phpbin $wpbin redis enable --path=$webroot
$phpbin $wpbin redis update-dropin --path=$webroot
EOF

return 1
fi
return 0
}

function redis_status(){
  redis_status_res=$(su - $user -s /usr/bin/bash -c "$phpbin $wpbin redis status --path=$webroot --skip-themes 2>/dev/null")
  if [[ $redis_status_res == *'Ping: 1'* || $redis_status_res == *'Connected'* ]]; then
    print_out success 'Redis connected'
    return 0
  else
    print_out error 'Redis not connected'
    return 1
  fi
}


function delete_redis(){
su - $user -s /usr/bin/bash -- << EOF
rm -r $redisdir 2>/dev/null
pkill -9 redis 2>/dev/null
$phpbin $wpbin config delete WP_REDIS_CONFIG --path=$webroot $wpcliopt 2>/dev/null
$phpbin $wpbin config delete WP_REDIS_SCHEME --path=$webroot $wpcliopt 2>/dev/null
$phpbin $wpbin config delete WP_REDIS_PATH --path=$webroot $wpcliopt 2>/dev/null
$phpbin $wpbin plugin deactivate redis-cache --path=$webroot 2>/dev/null
$phpbin $wpbin plugin deactivate object-cache-pro --path=$webroot 2>/dev/null
$phpbin $wpbin plugin delete redis-cache --path=$webroot 2>/dev/null
$phpbin $wpbin plugin delete object-cache-pro --path=$webroot 2>/dev/null
EOF
delete_cron redis
}

function disable_redis(){
  su - $user -s /usr/bin/bash -c "$phpbin $wpbin redis disable --path=$webroot"
}

function enable_redis(){
redis_ping
if [[ $? -eq 1 ]]; then  #Redis daemon is not running
 echo 'Info: Configuring Redis Socket.'
su - $user -s /usr/bin/bash -- << EOF
[ ! -d $redisdir ] && mkdir $redisdir
curl -s 'https://raw.githubusercontent.com/naqirizvi/rocket/main/redis.conf' -o $redisdir/redis.conf
curl -s 'https://raw.githubusercontent.com/naqirizvi/rocket/main/start_redis.sh' -o $redisdir/start_redis.sh
sed -i "s@REDISDIR@$redisdir@g" $redisdir/* 2>/dev/null
chmod 755 $redisdir/start_redis.sh
bash $redisdir/start_redis.sh
EOF
echo 'Info: Redis configuration complete.'
else
echo 'Info: Verifying the redis-cache plugin.'
fi

redis_plugin
if [[ $? -eq 1 ]]; then redis_status; fi
#Setup Cronjob for Redis
setup_cron redis
}

function enable_redis_pro(){
redis_ping
if [[ $? -eq 1 ]]; then  #Redis daemon is not running
echo 'Info: Configuring Redis Socket.'
su - $user -s /usr/bin/bash -- << EOF
[ ! -d $redisdir ] && mkdir $redisdir
curl -s 'https://raw.githubusercontent.com/naqirizvi/rocket/main/redis.conf' -o $redisdir/redis.conf
curl -s 'https://raw.githubusercontent.com/naqirizvi/rocket/main/start_redis.sh' -o $redisdir/start_redis.sh
sed -i "s@REDISDIR@$redisdir@g" $redisdir/* 2>/dev/null
chmod 755 $redisdir/start_redis.sh
bash $redisdir/start_redis.sh
EOF
echo 'Info: Redis configuration complete.'
else
echo 'Info: Verifying the object-cache-pro plugin.'
fi
su - $user -s /usr/bin/bash -- << EOF
cd /home/$user/public_html
echo 'Info: Removing Old configuration if any.'
$phpbin $wpbin config delete WP_REDIS_CONFIG --path=$webroot $wpcliopt 2>/dev/null
$phpbin $wpbin config delete WP_REDIS_SCHEME --path=$webroot $wpcliopt 2>/dev/null
$phpbin $wpbin config delete WP_REDIS_PATH --path=$webroot $wpcliopt 2>/dev/null
echo 'Info: Adding Object Cache Pro configuration in WP-Config.php.'

sed -i "/<?php/a \
define( 'WP_REDIS_CONFIG', [  \
'token' => '9489c9b05ea4d20cab4613259ae01fc3053459dc385b8dbcc746efda3e41', \
'host' => '/home/\$USER/redis/redis.sock', \
'database' => 0, \
'maxttl' => 3600 * 24 * 7, \
'timeout' => 1.0, \
'read_timeout' => 1.0, \
'split_alloptions' => false, \
'debug' => false, \
]);" wp-config.php
echo 'Info: Installing Object Cache Pro.'
$phpbin $wpbin plugin install https://rocketscripts.space/assets/object-cache-pro.zip --activate --path=$webroot $wpcliopt --quiet 2>/dev/null
echo 'Info: Updating Object Cache Pro.'
$phpbin $wpbin plugin update object-cache-pro --path=$webroot $wpcliopt --quiet  2>/dev/null
echo 'Info: Activating Object Cache Pro.'
$phpbin $wpbin redis enable --force --path=$webroot --quiet  2>/dev/null
EOF
redis_status
#Setup Cronjob for Redis
setup_cron redis
}

function enable_smtp(){
  subdomain=$(su - $user -s /usr/bin/bash -c 'cat /var/cpanel/userdata/$USER/main |grep main_domain |awk "{ print $2 }" |cut -d. -f1')
  echo "Configuring SMTP for domain $subdomain"
  su - $user  -s /usr/bin/bash -c "curl -s https://scripts.onrocket.com/setupemail | bash;"
  status=$?
  if [[ $status -eq 0  ]]
  then  echo "SMTP configured successfully"
    lsphp=$(su - $user -s /usr/bin/bash -c "pkill -f lsphp;")
    if [[ $lsphp -eq 'Terminated' ]]
      then echo "LSPHP processes killed successfully"
    else echo "Please kill LSPHP for user manually"
      exit $lsphp
    fi
  else
    echo "Error configuring SMTP"
    exit $status
  fi
}

function modified_files(){
  su - $use -s /usr/bin/bash -c "cd /home/$user/public_html && find . -mtime -2 | sed '/cache/d' | sed '/uploads/d'"
}

################################################################
# Main Functions                                               #
################################################################
function separator(){
	printf "${NORMAL}${GREEN}___________________________________________________________________________________${NC}\n"
}

function testing(){
  read -ep "Do you wish to start Wordpress Testing?" -n1 answer && if [[ $answer = y ]] ; then
    user_validation
    echo "Wordpress Testing Started: $user"
    read -ep "Do you wish to test wordpress_sso?     " -n1 answer && if [[ $answer = y ]] ; then wordpress_sso     ; separator;  fi
    read -ep "Do you wish to test cpanel_sso?        " -n1 answer && if [[ $answer = y ]] ; then cpanel_sso        ; separator;  fi
    read -ep "Do you wish to test setup_cron wp?     " -n1 answer && if [[ $answer = y ]] ; then setup_cron wp     ; separator;  fi
    read -ep "Do you wish to test enable_smtp?       " -n1 answer && if [[ $answer = y ]] ; then enable_smtp       ; separator;  fi
    read -ep "Do you wish to test reset_permissions? " -n1 answer && if [[ $answer = y ]] ; then reset_permissions ; separator;  fi
    read -ep "Do you wish to test modified_files?    " -n1 answer && if [[ $answer = y ]] ; then modified_files    ; separator;  fi
    read -ep "Do you wish to test delete_redis?      " -n1 answer && if [[ $answer = y ]] ; then delete_redis      ; separator;  fi
    read -ep "Do you wish to test enable_redis?      " -n1 answer && if [[ $answer = y ]] ; then enable_redis      ; separator;  fi
    read -ep "Do you wish to test enable_redis_pro?  " -n1 answer && if [[ $answer = y ]] ; then enable_redis_pro  ; separator;  fi
    fi
    read -ep "Do you wish to start Administration Testing?" -n1 answer && if [[ $answer = y ]] ; then
    echo 'Administration Testing Started'                            
    read -ep "Do you wish to test ftpconn?           " -n1 answer && if [[ $answer = y ]] ; then ftpconn           ; separator;  fi
    read -ep "Do you wish to test memoryusage?       " -n1 answer && if [[ $answer = y ]] ; then memoryusage       ; separator;  fi
    read -ep "Do you wish to test swapusage?         " -n1 answer && if [[ $answer = y ]] ; then swapusage         ; separator;  fi
    read -ep "Do you wish to test ServerXray?        " -n1 answer && if [[ $answer = y ]] ; then ServerXray        ; separator;  fi
    read -ep "Do you wish to test mysqladmin status? " -n1 answer && if [[ $answer = y ]] ; then mysqladmin status ; separator;  fi
    read -ep "Do you wish to test MySQL_rowcount?    " -n1 answer && if [[ $answer = y ]] ; then MySQL_rowcount    ; separator;  fi
    read -ep "Do you wish to test MySQL_dbsize?      " -n1 answer && if [[ $answer = y ]] ; then MySQL_dbsize      ; separator;  fi
    read -ep "Do you wish to test MySQL_tablesize?   " -n1 answer && if [[ $answer = y ]] ; then MySQL_tablesize   ; separator;  fi           
    fi
    read -ep "Do you wish to start Firewall Testing?" -n1 answer && if [[ $answer = y ]] ; then
    echo 'Firewall Testing Started'                                     
    read -ep "Do you wish to test ip_validation?                     " -n1 answer && if [[ $answer = y ]] ; then ip_validation           ; separator;  fi
    read -ep "Do you wish to test IPWhitelisting $ipaddr?       " -n1 answer && if [[ $answer = y ]] ; then IPWhitelisting $ipaddr       ; separator;  fi
    read -ep "Do you wish to test csf_deny_remove  $ipaddr?     " -n1 answer && if [[ $answer = y ]] ; then csf_deny_remove  $ipaddr     ; separator;  fi
    read -ep "Do you wish to test csf_cpanel_whitelist $ipaddr? " -n1 answer && if [[ $answer = y ]] ; then csf_cpanel_whitelist $ipaddr ; separator;  fi
    read -ep "Do you wish to test remote_mysql $ipaddr?         " -n1 answer && if [[ $answer = y ]] ; then remote_mysql $ipaddr         ; separator;  fi
    read -ep "Do you wish to test openport 25?                  " -n1 answer && if [[ $answer = y ]] ; then openport 25                  ; separator;  fi
    fi
    read -ep "Do you wish to start Database Testing?" -n1 answer && if [[ $answer = y ]] ; then  
    echo 'Database Testing Started'                       
    read -ep "Do you wish to test site_autoload_size?     " -n1 answer && if [[ $answer = y ]] ; then site_autoload_size    ; separator;  fi
    read -ep "Do you wish to test site_db_size?           " -n1 answer && if [[ $answer = y ]] ; then site_db_size          ; separator;  fi
    read -ep "Do you wish to test fix_db_credentials?     " -n1 answer && if [[ $answer = y ]] ; then fix_db_credentials    ; separator;  fi
    read -ep "Do you wish to test myisam_2_innodb?        " -n1 answer && if [[ $answer = y ]] ; then myisam_2_innodb       ; separator;  fi
    read -ep "Do you wish to test fix_db_collation?       " -n1 answer && if [[ $answer = y ]] ; then fix_db_collation      ; separator;  fi
    fi
    read -ep "Do you wish to start Domain Testing?" -n1 answer && if [[ $answer = y ]] ; then  
    read -ep 'Domain: ' domain
    echo "Domain Testing Started for domain $domain"    
    read -ep "Do you wish to test domainlookup $domain?   " -n1 answer && if [[ $answer = y ]] ; then domainlookup $domain  ; separator;  fi
    read -ep "Do you wish to test dnslookup $domain?      " -n1 answer && if [[ $answer = y ]] ; then dnslookup $domain     ; separator;  fi
    read -ep "Do you wish to test domain_header $domain?  " -n1 answer && if [[ $answer = y ]] ; then domain_header $domain ; separator;  fi
    fi
    echo 'Unit Testing Completed'
}


function help(){
if [ $1 == 'true' ]; then
cat <<_EOF_
------------------------------------Cockpit's Main Menu------------------------ [q] Quit ---------

 [w] Wordpress                                 [f] Firewall
     (1) WP-Admin SSO                              (1) Unblock ModSec
     (2) cPanel SSO                                (2) Unblock SSH/sFTP
     (3) Enable WP Cron                            (3) Allow cPanel
     (4) Enable SMTP                               (4) Enable Remote MySQL
     (5) Reset Permissions                         (5) Open Outbound Port
     (6) List Modified Files - 24h
     (7) Install Redis                         [m] Migration
     (8) Install Redis PRO                         (1) SSH - Rsync    (5) Cloudways  
     (9) Delete Redis                              (2) All-In-One     (6) WP Engine
                                                   (3) Kinsta         (7) Site Ground
 [d] Database                                      (4) FlyWheel       (8) Seravo
     (1) Site's Autoload Size                  
     (2) Site's Database Size                  [a] Administration
     (3) Fix DB credentails                        (1) FTP Connections
     (4) MyIsam to InnoDB                          (2) Memory usage
     (5) Change collation (utf8mb4_unicode_ci)     (3) SWAP Usage
                                                   (4) Server XRay
 [u] URL                                           (5) MySQL Status
     (1) Get SiteID & User                         (6) MySQL Data Length
     (2) DNS Lookup                                (7) MySQL Disk by Database
     (3) Header, Redirect, Cache & TTFB checker    (8) MySQL Disk by Tables

------------------------------------------------------------------------------- Version $VERSION ----
_EOF_
else
cat <<_EOF_
---------------------------------------------------------------------------------------------------------------

              Try running cockpit without any argument to check for an extended list of options.
                                                       OR 
              If you are trying to access legacy Rlaunch, So here is the list of Rlaunch arguments.
       |
       |          -----------------------------------------------------------------------------------------
      / \         |   Rocket Launch                                                                       |
     /___\        -----------------------------------------------------------------------------------------
    |     |       | rlaunch <command> <argument>                                                          |
    |=   =|       |                                                                                       |
    |     |       | Available Commands:                                                                   |
    |  R  |       |                                                                                       |
    |  L  |       | openport         # Allow Outbound TCP Traffic to port above 1000                      |
    |  A  |       | resetperms       # Reset permissions in /home/username/public_html/                   |
    |  U  |       | fixwpcreds       # Reset WordPress database credentials in wp-config from Softaculous |
    |  N  |       | whitelist_modsec # Whitelist an IP from mod_security                                  |
    |  C  |       | enable_redis     # Enable Redis object caching for a username                         |
    |  H  |       | myisam2innodb    # Convert all MyISAM tables to InnoDB for increased performance      |
    |     |       | wpcron           # Disable the built in WordPress cron in favor of a Linux Cron job   |
   /|  !  |\      | cpanellink       # Create a link to login to cPanel as a user (FOR STAFF ONLY)        |
  / |  !  | \     | sso              # Create SSO to login wp-admin                                       |
 /  |__!__|  \    | smtp             # Configure SMTP on the server                                       |
|  / /_|_\ \  |   |                                                                                       |
| /         \ |   -----------------------------------------------------------------------------------------
|/           \|
---------------------------------------------------------------------------------------------------------------
_EOF_
fi
}

Mainmenu(){
  #printf "${NORMAL}${YELLOW}Ignition...\n"
  #sleep .1
  #printf "${NORMAL}${RED}3\n"
  #sleep .1
  #printf "${NORMAL}${YELLOW}2\n"
  #sleep .1
  #printf "${NORMAL}${GREEN}1\n"
  #sleep .1
  #printf "${NORMAL}${CYAN}...\n"
  #sleep .1
  #printf "${NORMAL}${GREEN}Lift Off.${NC}\n"
  #sleep .1
  while :
  do
  read -ep "Select Main Menu [wdufma]: " -n1 menu
  case $menu in
    #"w"|"W"|"d"|"D"|"u"|"U"|"f"|"F"|"m"|"M"|"a"|"A") read -ep $'Select Sub Menu [1-9]: ' -n1 choice2 ;;&
    f|F)
      if ! root_validation 'root'; then
        print_out error 'Forbidden: Requires sudo privilege.'; exit 1
      fi
    ;;&
    u|U)
      printf '1) Get SiteID & User\n'
      printf '2) DNS Lookup\n'
      printf '3) Header, Redirect, Cache & TTFB checker\n'
      read -ep $'URL Menu [1-3]: ' -n1 submenu
      case $submenu in
        1) echo 'Get SiteID & User'                 ;;&
        2) echo 'DNS Lookup'                        ;;&
        2) echo 'Header, Redirect, Cache & TTFB checker'                        ;;&
        1|2|3) domain_validation                    ;;&
        1) domainlookup; sleep .8           ;;
        2) dnslookup; sleep .8              ;;
        3) domain_header; sleep .8          ;;
        q|Q) exit 0                                 ;;
        *) print_out error 'Invalid choice.'        ;;
      esac
    ;;
    d|D)
      printf '1) Site Autoload Size\n'
      printf '2) Site Database Size\n'
      printf '3) Fix DB credentails\n'
      printf '4) MyIsam to InnoDB\n'
      printf '5) Change collation (utf8mb4_unicode_ci)\n'
      read -ep $'Database Menu [1-5]: ' -n1 submenu
      case $submenu in
        1) echo "Site's Autoload Size"                   ;;&
        2) echo "Site's Database Size"                   ;;&
        3) echo 'Fix DB credentails'                     ;;&
        4) echo 'MyIsam to InnoDB'                       ;;&
        5) echo 'Change collation (utf8mb4_unicode_ci)'  ;;&
        1) user_validation; site_autoload_size                ;;
        2) user_validation; site_db_size                      ;;
        3) user_validation; fix_db_credentials                ;;
        4) user_validation; myisam_2_innodb                   ;;
        5) user_validation; fix_db_collation                  ;;
        q|Q) exit 0                                      ;;
        *) print_out error 'Invalid choice.'             ;;
      esac  
    ;;
    f|F)
      printf '1) Unblock ModSec\n'
      printf '2) Unblock SSH/sFTP\n'
      printf '3) Allow cPanel\n'
      printf '4) Enable Remote MySQL\n'
      printf '5) Open Outbound Port\n'
      read -ep $'Firewall Menu [1-5]: ' -n1 submenu
      case $submenu in
        1) echo 'Unblock ModSec'          ;;&
        2) echo 'Unblock SSH/sFTP'        ;;&
        3) echo 'Allow cPanel'            ;;&
        4) echo 'Enable Remote MySQL'     ;;&
        5) echo 'Open Outbound Port'      ;;&
        1|2|3|4) while ip_validation; [[ $? -ne 0 ]]; do sleep .8; done              ;;&
        1) IPWhitelisting $ipaddr; sleep .8                                     ;;
        2) csf_deny_remove  $ipaddr; sleep .8                                   ;;
        3) csf_cpanel_whitelist $ipaddr; sleep .8                               ;;
        4) remote_mysql $ipaddr; sleep .8                                       ;;
        5) while openport; [[ $? -ne 0 ]]; do sleep .8; done                    ;;
        q|Q) exit 0                                                             ;;
        *) print_out error 'Invalid choice.'                                               ;;
      esac
    ;;
    m|M)
      printf '1) SSH - Rsync\n'
      printf '2) All-In-One\n'
      printf '3) Kinsta\n'
      printf '4) FlyWheel\n'
      printf '5) Cloudways\n'
      printf '6) WP Engine\n'
      printf '7) Site Ground\n'
      printf '8) Seravo\n'
      read -ep $'Migration Source [1-8]: ' -n1 submenu
      case $submenu in
        1) echo 'SSH - Rsync'                          ;;&
        2) echo 'All-In-One'                           ;;&
        3) echo 'Kinsta'                               ;;&
        4) echo 'FlyWheel'                             ;;&
        5) echo 'Cloudways'	                           ;;&
        6) echo 'WP Engine'                            ;;&
        7) echo 'Site Ground'                          ;;&
        8) echo 'Seravo'                               ;;&
        1) user_validation; migrate_ssh 'SSH - RSYNC'  ;;
        2) user_validation; migrate_ai1wm              ;;
        3) user_validation; migrate_ssh 'Kinsta'       ;;
        4) user_validation; migrate_ssh 'FlyWheel'     ;;
        5) user_validation; time migrate_ssh cloudways      ;;
        6) user_validation; migrate_ssh 'WP Engine'    ;;
        7) user_validation; migrate_ssh 'Site Ground'  ;;
        8) user_validation; migrate_ssh seravo         ;;
        q|Q) exit 0                                    ;;
        *) print_out error 'Invalid choice.'           ;;
      esac
    ;;
    a|A)
      printf '1) FTP Connections\n'
      printf '2) Memory usage\n'
      printf '3) SWAP Usage\n'
      printf '4) Server XRay\n'
      printf '5) MySQL Status\n'
      printf '6) MySQL Data Length\n'
      printf '7) MySQL Disk by Database\n'
      printf '8) MySQL Disk by Tables\n'
      read -ep $'Administration Menu [1-8]: ' -n1 submenu
      case $submenu in
        1) echo 'FTP Connections'         ;;&
        2) echo 'Memory usage'            ;;&
        3) echo 'SWAP Usage'              ;;&
        4) echo 'Server XRay'             ;;&
        5) echo 'MySQL Status'	          ;;&             
        6) echo 'MySQL Data Length'       ;;&
        7) echo 'MySQL Disk by Database'  ;;&
        8) echo 'MySQL Disk by Tables'    ;;&
        1) ftpconn; sleep .8              ;;
        2) memoryusage; sleep .8          ;;
        3) swapusage; sleep .8            ;;
        4) ServerXray; sleep .8           ;;
        5) mysqladmin status; sleep .8    ;;
        6) MySQL_rowcount; sleep .8       ;;
        7) MySQL_dbsize; sleep .8         ;;
        8) MySQL_tablesize; sleep .8      ;;
        q|Q) exit 0                       ;;
        *) print_out error 'Invalid choice.'         ;;
      esac  ;;
    w|W)
      printf '1) WP-Admin SSO             \n'
      printf '2) cPanel SSO               \n'
      printf '3) Enable WP Cron           \n'
      printf '4) Enable SMTP              \n'
      printf '5) Reset Permissions        \n'
      printf '6) List Modified Files - 24h\n'
      printf '7) Install Redis            \n'
      printf '8) Install Redis PRO        \n'
      printf '9) Delete Redis             \n'
      read -ep $'Wordpress Menu [1-9]: ' -n1 submenu
      case $submenu in
        1) echo 'WP-Admin SSO'              ;;&
        2) echo 'cPanel SSO'                ;;&
        3) echo 'Enable WP Cron'            ;;&
        4) echo 'Enable SMTP'               ;;&
        5) echo 'Reset Permissions'         ;;&
        6) echo 'List Modified Files - 24h' ;;&
        7) echo 'Install Redis'             ;;&
        8) echo 'Install Redis PRO'         ;;&
        9) echo 'Delete Redis'              ;;&
        1) user_validation; wordpress_sso               ;;
        2) user_validation; cpanel_sso; sleep .8        ;;
        3) user_validation; setup_cron wp; sleep .8     ;;
        4) user_validation; enable_smtp; sleep .8       ;;
        5) user_validation; reset_permissions; sleep .8 ;;
        6) user_validation; modified_files; sleep .8    ;;
        7) user_validation; enable_redis; sleep .8      ;;
        8) user_validation; enable_redis_pro; sleep .8  ;;
        9) user_validation; delete_redis; sleep .8      ;;
        q|Q) exit 0                                ;;
        *) print_out error 'Invalid choice.'        ;;
      esac
    ;;
    b|B) break   ;;
    h|H) help true; continue   ;;
    q|Q) exit 0  ;;
    *)  print_out error "Error: Invalid option, please try again"  ;;
  esac
  help true
  done
}

rlaunch(){
  case $1 in
    openport)         openport $2                                                 ;;
    whitelist_modsec) ip_validation $2   && IPWhitelisting $ipaddr                ;;
    resetperms)       user_validation $2 && reset_permissions                     ;;
    fixwpcreds)       user_validation $2 && fix_db_credentials                    ;;
    enable_redis)     user_validation $2 && enable_redis                          ;;
    delete_redis)     user_validation $2 && delete_redis                          ;;
    myisam2innodb)    user_validation $2 && myisam_2_innodb                       ;;
    wpcron)           user_validation $2 && setup_cron wp                         ;;
    cpanellink)       user_validation $2 && cpanel_sso                            ;;
    sso)              user_validation $2 && wordpress_sso                         ;;
    smtp)             user_validation $2 && enable_smtp                           ;;
    *) print_out error "Error: No such function found in Cockpit.";  exit 1             ;;
  esac
}

function usage() {
cat <<_EOF_
Usage: cockpit OR cockpit [OPTION] OR cockpit [FUNCTION] [USER]

Options:
  -m                           display Cockpit Main Menu
  -h                           display this help message
  -v                           display version number

Functions:                     
  openport                     Allow Outbound TCP Traffic to port above 1000 
  resetperms                   Reset permissions in /home/username/public_html/ 
  fixwpcreds                   Reset WordPress database credentials in wp-config
  whitelist_modsec             Whitelist an IP from mod_security 
  enable_redis                 Install and Enable Redis cache
  delete_redis                 Delete Redis & Object Cache
  myisam2innodb                Convert all MyISAM tables to InnoDB for increased performance 
  wpcron                       Disable the built in WordPress cron in favor of a Linux Cron job 
  cpanellink                   Create a link to login to cPanel as a user (FOR STAFF ONLY) 
  sso                          Create SSO to login wp-admin 
  smtp                         Configure SMTP on the server 

Examples:                      
  cockpit                      cockpit interactive mode
  cockpit [FUNCTION]           cockpit with predefined function - user can be specified later
  cockpit [FUNCTION] [USER]    cockpit with predefined function and user specified

_EOF_
}

opt_test="test content"
# option parsing
OPTSPEC=:mdhvtf:
while getopts $OPTSPEC option; do
  case "$option" in
    m ) help true; exit 0  ;;
    r ) help false; exit 0  ;;
    d ) opt_debug='true' ;;
    h ) usage; exit 0  ;;
    v ) version; exit 0  ;;
    t ) opt_testing='true'; testing; exit 0  ;;
    f ) opt_test=$OPTARG;  ;;
   \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    * ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

# required option validation
if [ -z "$opt_test" ] ; then
  usage
  exit 1
fi


salt='F%sdh2_*'
protocol='sha1sum'

update_conf(){
  encypted_config=$(echo "$config" | openssl aes-256-cbc -a -pbkdf2 -pass pass:$salt)
  echo "$encypted_config" > $CONF_FILE
  if [ $? -ne 0 ]; then print_out error "Error: Unable to save configuration file"; fi
  fetch_conf
}

fetch_conf(){
  old_user=$(echo "$config" | grep ^user: | cut -d: -f2)
  old_domain=$(echo "$config" | grep ^domain: | cut -d: -f2)
  old_ip=$(echo "$config" | grep ^ip: | cut -d: -f2)
  old_port=$(echo "$config" | grep ^port: | cut -d: -f2)
  old_ssh_host=$(echo "$config" | grep ^ssh_host: | cut -d: -f2)
  old_ssh_user=$(echo "$config" | grep ^ssh_user: | cut -d: -f2)
  old_ssh_pass=$(echo "$config" | grep ^ssh_pass: | cut -d: -f2)
  old_ssh_webroot=$(echo "$config" | grep ^ssh_webroot: | cut -d: -f2)
  old_ssh_port=$(echo "$config" | grep ^ssh_port: | cut -d: -f2)
  old_ssh_appname=$(echo "$config" | grep ^ssh_appname: | cut -d: -f2)
}

cockpit_conf(){
if [[ ! -e $CONF_FILE ]]; then
#plain conf
config="user:
domain:
ip:
port:
ssh_host:
ssh_user:
ssh_pass:
ssh_webroot:
ssh_port:
ssh_appname:"
  update_conf 
else
  #decrypted conf = plain conf
  config=$(cat $CONF_FILE | openssl aes-256-cbc -d -a -pbkdf2 -pass pass:$salt)
  if [ $? -ne 0 ]; then print_out error "Error: Unable to read configuration file"; fi
  fetch_conf
fi
}


if [ "$#" -eq 0 ]; then
  cockpit_conf
  status_flag=$(curl -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" -H "Expires: 0" -s -o /dev/null -I -w "%{http_code}" https://raw.githubusercontent.com/naqirizvi/rocket/main/.flag)
  if [ ! $status_flag == 200 ]; then exit 1; fi
  reset
  help true
  Mainmenu
elif [ "$#" -gt 2 ]; then
  print_out error "Error: Invalid number of arguments."
  exit 1
else
  rlaunch $1 $2
fi
